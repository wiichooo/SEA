/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package softestandantrop;

import DataBase.DataBase;
import Modelos.Ronda;
import Modelos.RondaAntropometrista;
import Modelos.Sujeto;
import java.awt.Frame;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Luis
 */
public class SeleccionarSujetos extends javax.swing.JDialog {

    /**
     * Creates new form SeleccionarSujetos
     */
    AgregarRonda Ronda;
    SeleccionarAntropometristas Antropometristas;
    DefaultListModel listSelec = new DefaultListModel();
    ArrayList<Sujeto> sujetos = new ArrayList<Sujeto>();
    Inicio inicio;
    public SeleccionarSujetos() {
        super(new Frame(), true);
        initComponents();
        this.setLocationRelativeTo(null);

        listSelec = new DefaultListModel();

        this.setVisible(true);
    }

    SeleccionarSujetos(AgregarRonda Ronda, SeleccionarAntropometristas Antropometristas, Inicio inicio) {
        super(new Frame(), true);
        initComponents();
        this.inicio = inicio;
        this.setLocationRelativeTo(null);
        this.Ronda = Ronda;
        this.Antropometristas = Antropometristas;
        listSelec = new DefaultListModel();
        ltSelec.setModel(listSelec);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BtnCancelar = new javax.swing.JButton();
        BtnAceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ltSelec = new javax.swing.JList();
        BtnAgregarA = new javax.swing.JButton();
        BtnEliminarA = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agregar Sujetos", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        BtnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Delete.png"))); // NOI18N
        BtnCancelar.setText("Cancelar");
        BtnCancelar.setName("BtnCancelar"); // NOI18N
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });

        BtnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Check.png"))); // NOI18N
        BtnAceptar.setText("Crear Ronda");
        BtnAceptar.setName("BtnAceptar"); // NOI18N
        BtnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAceptarActionPerformed(evt);
            }
        });

        ltSelec.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(ltSelec);

        BtnAgregarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Add.png"))); // NOI18N
        BtnAgregarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarAActionPerformed(evt);
            }
        });

        BtnEliminarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Restricted.png"))); // NOI18N
        BtnEliminarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BtnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(BtnAceptar))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BtnAgregarA, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnEliminarA, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BtnAgregarA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnEliminarA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnCancelar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void BtnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAceptarActionPerformed
        
        System.out.println(String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).substring(0, 
                String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).indexOf(" - ")));
        System.out.println(String.valueOf(Ronda.cboSupervisor.getSelectedItem()).substring(0, 
                String.valueOf(Ronda.cboSupervisor.getSelectedItem()).indexOf(" - ")));
        System.out.println(Ronda.txtNombre.getText());
        System.out.println(Ronda.fecha.getDate().toString());
        System.out.println(Ronda.rbPeso.isSelected());
        System.out.println(Ronda.rbTalla.isSelected());
        
        for(int x = 0; x < Antropometristas.listSelec.size(); x++){
            System.out.println(Antropometristas.listSelec.getElementAt(x).toString().substring(0, 
                String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).indexOf(" - ")));
        }
        
        Iterator it = sujetos.iterator();
        Sujeto sujeto;
        while(it.hasNext()){
            sujeto = (Sujeto) it.next();
            System.out.println(sujeto.getId() + "  " + sujeto.getNombre() +"  "+sujeto.getSexo() + " " + sujeto.getEdad());
        }
        InsertarInformacion();
        this.dispose();
    }//GEN-LAST:event_BtnAceptarActionPerformed

    private void BtnAgregarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarAActionPerformed
        new AgregarSujeto(this);
    }//GEN-LAST:event_BtnAgregarAActionPerformed

    private void BtnEliminarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarAActionPerformed
        try{
        listSelec.remove(ltSelec.getSelectedIndex());
        ltSelec.setModel(listSelec);
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_BtnEliminarAActionPerformed

    /**
     * @param args the command line arguments
     */
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAceptar;
    private javax.swing.JButton BtnAgregarA;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnEliminarA;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList ltSelec;
    // End of variables declaration//GEN-END:variables

    void agregar(Sujeto suj) {
        listSelec.addElement(suj.getNombre() + "   " + suj.getSexo() +  "   " + suj.getEdad());
        ltSelec.setModel(listSelec);
        sujetos.add(suj);
    }

    private void InsertarInformacion() {
//        System.out.println(String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).substring(0, 
//                String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).indexOf(" - ")));
//        System.out.println(String.valueOf(Ronda.cboSupervisor.getSelectedItem()).substring(0, 
//                String.valueOf(Ronda.cboSupervisor.getSelectedItem()).indexOf(" - ")));
//        System.out.println(Ronda.txtNombre.getText());
//        System.out.println(Ronda.fecha.getDate());
//        System.out.println(Ronda.rbPeso.isSelected());
//        System.out.println(Ronda.rbTalla.isSelected());
//        
//        for(int x = 0; x < Antropometristas.listSelec.size(); x++){
//            System.out.println(Antropometristas.listSelec.getElementAt(x).toString().substring(0, 
//                String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).indexOf(" - ")));
//        }
        
        try{
            DataBase op = new DataBase();
            List rondas = op.getAllRondas();
            int IDRonda = 1;
            if(!rondas.isEmpty()){
                Ronda r = (Ronda)rondas.get(rondas.size()-1);
                IDRonda = r.getId()+1;
            }        
            List sujetos1 = op.getAllSujetos();

            int IDSujeto = 1;
            if(!sujetos1.isEmpty()){
                Sujeto s = (Sujeto)sujetos1.get(sujetos1.size()-1);
                IDSujeto = s.getId()+1;
            }


            int estandarizacion = Integer.valueOf(String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).
                    substring(0,String.valueOf(Ronda.cboEstandarizacion.getSelectedItem()).indexOf(" - ")).trim());

            String RondaNombre = Ronda.txtNombre.getText();
            SimpleDateFormat sdfDate = new SimpleDateFormat("dd/MM/yyyy");
            String fecha = sdfDate.format(Ronda.fecha.getDate());
    //        fecha = fecha.replace("-", "/");

            int tipo = 0;
            if(Ronda.rbPeso.isSelected()){
               tipo = 1;
            }else if(Ronda.rbTalla.isSelected()){
               tipo = 2; 
            }

            Ronda ronda;
            ronda = new Ronda(IDRonda, RondaNombre, tipo,fecha, estandarizacion);
            op.insertarRonda(ronda);
            Iterator it = sujetos.iterator();
            Sujeto sujeto;
            ArrayList idsSujetos = new ArrayList();
            //boolean error = false;
            while(it.hasNext()){
                sujeto = (Sujeto) it.next();
                sujeto.setId(IDSujeto);
                //Insertar sujeto
                op.insertarSujeto(sujeto);
                idsSujetos.add(IDSujeto);
                IDSujeto += 1;    
            }
            for(int x = 0; x < Antropometristas.listSelec.size(); x++){
                int antropometrista = Integer.valueOf(Antropometristas.listSelec.getElementAt(x).toString().substring(0, 
                    Antropometristas.listSelec.getElementAt(x).toString().indexOf(" - ")).trim());

                Iterator ids = idsSujetos.iterator();
                while(ids.hasNext()){
                    int id = Integer.valueOf(ids.next().toString());
                    //Insertar RondaAntropometrista
                    try{                   
                        op.insertarRondaAntropometrista(new RondaAntropometrista(id, antropometrista, IDRonda));
                    }
                    catch(SQLException sw){
                        Error.mostrarMensajeError(this, "Error al asignar sujetos a antropometristas de ronda.\n\n"
                                + "MENSAJE: "+sw.getMessage(),"Crear Ronda");
                        return;
                    }
                }

            }

            int supervisor = Integer.valueOf(String.valueOf(Ronda.cboSupervisor.getSelectedItem()).substring(0, 
                    String.valueOf(Ronda.cboSupervisor.getSelectedItem()).indexOf(" - ")).trim());

            Iterator ids = idsSujetos.iterator();
            while(ids.hasNext()){
                int id = Integer.valueOf(ids.next().toString());
                //Insertar Supervisor
                try{
                    op.insertarRondaAntropometrista(new RondaAntropometrista(id, supervisor, IDRonda));
                }catch(SQLException se){
                    Error.mostrarMensajeError(this, "Error al asignar sujetos a supervisor de ronda.","Crear Ronda");
                    return;
                }
            }
            inicio.updateTree();
            JOptionPane.showMessageDialog(this,
                   "Ronda creada exitosamente!!",
                   "Crear Ronda",
                   JOptionPane.INFORMATION_MESSAGE);
        }
        catch(SQLException se){
            Error.mostrarMensajeError(this, "Ocurrió un error en la base de datos. \n\n"
                                + "MENSAJE: "+se.getMessage(), "Seleccionar Sujetos");
        }
    }
}
